{"version":3,"file":"core.test.js","sourceRoot":"","sources":["../../src/core/core.test.ts"],"names":[],"mappings":"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","sourcesContent":["import Event from \".\";\n\ndescribe(\"event\", () => {\n  test(\"subscribe\", () => {\n    const testEvent = new Event<[string]>();\n    const { unSubscribe } = testEvent.subscribe((data) => {\n      expect(data).toBe(\"1\");\n    });\n\n    testEvent.subscribe((data) => {\n      expect(data).toBe(\"1\");\n    });\n\n    testEvent.execute(\"1\");\n\n    expect((testEvent as any).event.stack.length).toBe(2);\n    unSubscribe();\n    expect((testEvent as any).event.stack.length).toBe(1);\n\n    testEvent.once(() => {\n      expect((testEvent as any).event.stack.length).toBe(1);\n    });\n    expect((testEvent as any).event.stack.length).toBe(2);\n    testEvent.execute(\"1\");\n  });\n\n  test(\"aspromise\", async () => {\n    const testEvent = new Event<[number]>();\n    setTimeout(() => {\n      testEvent.execute(1);\n    }, 0);\n    const [res] = await testEvent.asPromise();\n    expect(res).toBe(1);\n  });\n\n  test(\"complete\", async () => {\n    const event = new Event<[number]>();\n    const trigger = event.returnTrigger;\n    const listener = event.returnListener;\n    setTimeout(() => trigger.execute(0), 0);\n    {\n      const [res] = await listener.asPromise();\n      expect(typeof res).toBe(\"number\");\n    }\n    setTimeout(() => trigger.complete(), 0);\n    {\n      const [res] = await listener.asPromise();\n      expect(typeof res).toBe(\"undefined\");\n    }\n\n    expect(() => event.subscribe(() => {})).toThrowError(\"event completed\");\n    expect(() => event.execute(0)).toThrowError(\"event completed\");\n  });\n\n  test(\"test-error\", async () => {\n    const event = new Event<[number]>();\n    setTimeout(() => event.execute(1), 0);\n    {\n      const [res] = await event.asPromise();\n      expect(typeof res).toBe(\"number\");\n    }\n    setTimeout(() => event.error(\"error\"), 0);\n    {\n      const [res] = await event.asPromise().catch((e) => [e]);\n      expect(res).toBe(\"error\");\n    }\n  });\n});\n"]}