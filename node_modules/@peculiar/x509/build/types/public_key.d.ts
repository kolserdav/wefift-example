import { SubjectPublicKeyInfo } from "@peculiar/asn1-x509";
import { BufferSource } from "pvtsutils";
import { AsnEncodedType, PemData } from "./pem_data";
export interface IPublicKeyContainer {
    publicKey: PublicKey;
}
export declare type PublicKeyType = PublicKey | CryptoKey | IPublicKeyContainer | BufferSource;
export declare class PublicKey extends PemData<SubjectPublicKeyInfo> {
    protected readonly tag: string;
    algorithm: Algorithm;
    constructor(asn: SubjectPublicKeyInfo);
    constructor(raw: AsnEncodedType);
    export(crypto?: Crypto): Promise<CryptoKey>;
    export(algorithm: Algorithm | EcKeyImportParams | RsaHashedImportParams, keyUsages: KeyUsage[], crypto?: Crypto): Promise<CryptoKey>;
    protected onInit(asn: SubjectPublicKeyInfo): void;
    getThumbprint(crypto?: Crypto): Promise<ArrayBuffer>;
    getThumbprint(algorithm: globalThis.AlgorithmIdentifier, crypto?: Crypto): Promise<ArrayBuffer>;
    getKeyIdentifier(crypto?: Crypto): Promise<ArrayBuffer>;
}
