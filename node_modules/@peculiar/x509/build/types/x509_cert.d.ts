import { Certificate } from "@peculiar/asn1-x509";
import { HashedAlgorithm } from "./types";
import { Name } from "./name";
import { Extension } from "./extension";
import { IPublicKeyContainer, PublicKey, PublicKeyType } from "./public_key";
import { AsnEncodedType, PemData } from "./pem_data";
export interface X509CertificateVerifyParams {
    date?: Date;
    publicKey?: PublicKeyType;
    signatureOnly?: boolean;
}
export declare class X509Certificate extends PemData<Certificate> implements IPublicKeyContainer {
    protected readonly tag: string;
    private tbs;
    serialNumber: string;
    subjectName: Name;
    subject: string;
    issuerName: Name;
    issuer: string;
    notBefore: Date;
    notAfter: Date;
    signatureAlgorithm: HashedAlgorithm;
    signature: ArrayBuffer;
    extensions: Extension[];
    privateKey?: CryptoKey;
    publicKey: PublicKey;
    constructor(asn: Certificate);
    constructor(raw: AsnEncodedType);
    protected onInit(asn: Certificate): void;
    getExtension<T extends Extension>(type: string): T | null;
    getExtension<T extends Extension>(type: {
        new (raw: BufferSource): T;
    }): T | null;
    getExtensions<T extends Extension>(type: string): T[];
    getExtensions<T extends Extension>(type: {
        new (raw: BufferSource): T;
    }): T[];
    verify(params?: X509CertificateVerifyParams, crypto?: Crypto): Promise<boolean>;
    getThumbprint(crypto?: Crypto): Promise<ArrayBuffer>;
    getThumbprint(algorithm: globalThis.AlgorithmIdentifier, crypto?: Crypto): Promise<ArrayBuffer>;
    isSelfSigned(crypto?: Crypto): Promise<boolean>;
}
