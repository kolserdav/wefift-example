import { CertificateList, Version } from "@peculiar/asn1-x509";
import { HashedAlgorithm } from "./types";
import { Name } from "./name";
import { Extension } from "./extension";
import { PublicKey } from "./public_key";
import { AsnEncodedType, PemData } from "./pem_data";
import { X509Certificate } from "./x509_cert";
import { X509CrlEntry } from "./x509_crl_entry";
export interface X509CrlVerifyParams {
    publicKey: CryptoKey | PublicKey | X509Certificate;
}
export declare class X509Crl extends PemData<CertificateList> {
    protected readonly tag: string;
    private tbs;
    private tbsCertListSignatureAlgorithm;
    private certListSignatureAlgorithm;
    version?: Version;
    signatureAlgorithm: HashedAlgorithm;
    signature: ArrayBuffer;
    issuer: string;
    issuerName: Name;
    thisUpdate: Date;
    nextUpdate?: Date;
    entries: ReadonlyArray<X509CrlEntry>;
    extensions: Extension[];
    constructor(asn: CertificateList);
    constructor(raw: AsnEncodedType);
    protected onInit(asn: CertificateList): void;
    getExtension<T extends Extension>(type: string): T | null;
    getExtension<T extends Extension>(type: {
        new (raw: BufferSource): T;
    }): T | null;
    getExtensions<T extends Extension>(type: string): T[];
    getExtensions<T extends Extension>(type: {
        new (raw: BufferSource): T;
    }): T[];
    verify(params: X509CrlVerifyParams, crypto?: Crypto): Promise<boolean>;
    getThumbprint(crypto?: Crypto): Promise<ArrayBuffer>;
    getThumbprint(algorithm: globalThis.AlgorithmIdentifier, crypto?: Crypto): Promise<ArrayBuffer>;
    findRevoked(certOrSerialNumber: X509Certificate | string): X509CrlEntry | null;
}
