export declare type MapForEachCallback = (value: Crypto, key: string, map: Map<string, Crypto>) => void;
export declare class CryptoProvider implements Map<string, Crypto> {
    static DEFAULT: string;
    private items;
    static isCryptoKeyPair(data: any): data is CryptoKeyPair;
    static isCryptoKey(data: any): data is CryptoKey;
    constructor();
    clear(): void;
    delete(key: string): boolean;
    forEach(callbackfn: MapForEachCallback, thisArg?: any): void;
    has(key: string): boolean;
    get size(): number;
    entries(): IterableIterator<[string, Crypto]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<Crypto>;
    [Symbol.iterator](): IterableIterator<[string, Crypto]>;
    [Symbol.toStringTag]: string;
    get(): Crypto;
    get(key: string): Crypto;
    set(value: Crypto): this;
    set(key: string, value: Crypto): this;
}
export declare const cryptoProvider: CryptoProvider;
