{"version":3,"file":"red.js","sourceRoot":"","sources":["../../../../../src/media/receiver/red.ts"],"names":[],"mappings":";;;AAAA,6BAAwE;AAExE,MAAa,UAAU;IAAvB;QACmB,SAAI,GAAG,GAAG,CAAC;QACpB,oBAAe,GAAa,EAAE,CAAC;IAoDzC,CAAC;IAlDC,IAAI,CAAC,GAAQ,EAAE,GAAc;QAC3B,MAAM,OAAO,GAAgB,EAAE,CAAC;QAEhC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE;YAC5D,MAAM,cAAc,GAAG,IAAA,aAAS,EAC9B,GAAG,CAAC,MAAM,CAAC,cAAc,EACzB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAC/B,CAAC;YACF,IAAI,eAAe,EAAE;gBACnB,OAAO,CAAC,IAAI,CACV,IAAI,aAAS,CACX,IAAI,aAAS,CAAC;oBACZ,SAAS,EAAE,IAAA,aAAS,EAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC;oBAC5D,WAAW,EAAE,OAAO;oBACpB,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI;oBACrB,cAAc;oBACd,MAAM,EAAE,IAAI;iBACb,CAAC,EACF,KAAK,CACN,CACF,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,IAAI,CACV,IAAI,aAAS,CACX,IAAI,aAAS,CAAC;oBACZ,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS;oBAC/B,WAAW,EAAE,OAAO;oBACpB,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI;oBACrB,cAAc;oBACd,MAAM,EAAE,IAAI;iBACb,CAAC,EACF,KAAK,CACN,CACF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;YACpC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;gBAC1D,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE;oBAC3C,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;iBAC9B;gBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBACnD,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAtDD,gCAsDC","sourcesContent":["import { Red, RtpHeader, RtpPacket, uint16Add, uint32Add } from \"../..\";\n\nexport class RedHandler {\n  private readonly size = 150;\n  private sequenceNumbers: number[] = [];\n\n  push(red: Red, rtp: RtpPacket) {\n    const packets: RtpPacket[] = [];\n\n    red.blocks.forEach(({ blockPT, timestampOffset, block }, i) => {\n      const sequenceNumber = uint16Add(\n        rtp.header.sequenceNumber,\n        -(red.blocks.length - (i + 1))\n      );\n      if (timestampOffset) {\n        packets.push(\n          new RtpPacket(\n            new RtpHeader({\n              timestamp: uint32Add(rtp.header.timestamp, -timestampOffset),\n              payloadType: blockPT,\n              ssrc: rtp.header.ssrc,\n              sequenceNumber,\n              marker: true,\n            }),\n            block\n          )\n        );\n      } else {\n        packets.push(\n          new RtpPacket(\n            new RtpHeader({\n              timestamp: rtp.header.timestamp,\n              payloadType: blockPT,\n              ssrc: rtp.header.ssrc,\n              sequenceNumber,\n              marker: true,\n            }),\n            block\n          )\n        );\n      }\n    });\n\n    const filtered = packets.filter((p) => {\n      if (this.sequenceNumbers.includes(p.header.sequenceNumber)) {\n        return false;\n      } else {\n        if (this.sequenceNumbers.length > this.size) {\n          this.sequenceNumbers.shift();\n        }\n        this.sequenceNumbers.push(p.header.sequenceNumber);\n        return true;\n      }\n    });\n    return filtered;\n  }\n}\n"]}