"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedHandler = void 0;
const __1 = require("../..");
class RedHandler {
    constructor() {
        this.size = 150;
        this.sequenceNumbers = [];
    }
    push(red, rtp) {
        const packets = [];
        red.blocks.forEach(({ blockPT, timestampOffset, block }, i) => {
            const sequenceNumber = (0, __1.uint16Add)(rtp.header.sequenceNumber, -(red.blocks.length - (i + 1)));
            if (timestampOffset) {
                packets.push(new __1.RtpPacket(new __1.RtpHeader({
                    timestamp: (0, __1.uint32Add)(rtp.header.timestamp, -timestampOffset),
                    payloadType: blockPT,
                    ssrc: rtp.header.ssrc,
                    sequenceNumber,
                    marker: true,
                }), block));
            }
            else {
                packets.push(new __1.RtpPacket(new __1.RtpHeader({
                    timestamp: rtp.header.timestamp,
                    payloadType: blockPT,
                    ssrc: rtp.header.ssrc,
                    sequenceNumber,
                    marker: true,
                }), block));
            }
        });
        const filtered = packets.filter((p) => {
            if (this.sequenceNumbers.includes(p.header.sequenceNumber)) {
                return false;
            }
            else {
                if (this.sequenceNumbers.length > this.size) {
                    this.sequenceNumbers.shift();
                }
                this.sequenceNumbers.push(p.header.sequenceNumber);
                return true;
            }
        });
        return filtered;
    }
}
exports.RedHandler = RedHandler;
//# sourceMappingURL=red.js.map