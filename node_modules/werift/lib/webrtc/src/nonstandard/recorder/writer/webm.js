"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebmFactory = void 0;
const fs = __importStar(require("fs/promises"));
const __1 = require("../../..");
const _1 = require(".");
class WebmFactory extends _1.MediaWriter {
    start(tracks) {
        this.webm = new __1.WebmOutput(fs, this.path, tracks.map((track, i) => {
            const trackNumber = i + 1;
            const payloadType = track.codec.payloadType;
            if (track.kind === "video") {
                const codec = (() => {
                    switch (track.codec?.name.toLowerCase()) {
                        case "vp8":
                            return "VP8";
                        case "vp9":
                            return "VP9";
                        case "h264":
                            return "MPEG4/ISO/AVC";
                        case "av1x":
                            return "AV1";
                        default:
                            throw new Error();
                    }
                })();
                return {
                    kind: "video",
                    clockRate: 90000,
                    payloadType,
                    trackNumber,
                    codec,
                    width: this.options.width,
                    height: this.options.height,
                };
            }
            else {
                return {
                    kind: "audio",
                    clockRate: 48000,
                    payloadType,
                    trackNumber,
                    codec: "OPUS",
                };
            }
        }));
        tracks.forEach((track) => {
            const sampleBuilder = track.kind === "video"
                ? new __1.SampleBuilder((h) => !!h.marker).pipe(this.webm)
                : new __1.SampleBuilder(() => true).pipe(this.webm);
            new __1.JitterBuffer({
                rtpStream: track.onReceiveRtp,
                rtcpStream: track.onReceiveRtcp,
            }).pipe(sampleBuilder);
        });
    }
    async stop() {
        await this.webm.stop();
    }
}
exports.WebmFactory = WebmFactory;
const supportedVideoCodecs = ["h264", "vp8", "vp9", "av1x"];
//# sourceMappingURL=webm.js.map