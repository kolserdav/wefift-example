"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserMp4 = void 0;
const child_process_1 = require("child_process");
const dgram_1 = require("dgram");
const promises_1 = require("timers/promises");
const uuid_1 = require("uuid");
const src_1 = require("../../../common/src");
const src_2 = require("../../../rtp/src");
const track_1 = require("../media/track");
const getUserMp4 = async (path, loop) => {
    const audioPort = await (0, src_1.randomPort)();
    const videoPort = await (0, src_1.randomPort)();
    return new MediaMp4(audioPort, videoPort, path, loop);
};
exports.getUserMp4 = getUserMp4;
class MediaMp4 {
    constructor(videoPort, audioPort, path, loop) {
        this.videoPort = videoPort;
        this.audioPort = audioPort;
        this.path = path;
        this.loop = loop;
        this.streamId = (0, uuid_1.v4)();
        this.audio = new track_1.MediaStreamTrack({ kind: "audio", streamId: this.streamId });
        this.video = new track_1.MediaStreamTrack({ kind: "video", streamId: this.streamId });
        this.setupTrack = (port, track) => {
            let payloadType = 0;
            const socket = (0, dgram_1.createSocket)("udp4");
            socket.bind(port);
            socket.on("message", async (buf) => {
                const rtp = src_2.RtpPacket.deSerialize(buf);
                if (!payloadType) {
                    payloadType = rtp.header.payloadType;
                }
                // detect gStreamer restarted
                if (payloadType !== rtp.header.payloadType) {
                    payloadType = rtp.header.payloadType;
                    track.onSourceChanged.execute(rtp.header);
                }
                track.writeRtp(buf);
            });
        };
        this.setupTrack(audioPort, this.audio);
        this.setupTrack(videoPort, this.video);
    }
    async start() {
        let payloadType = 96;
        const run = async () => {
            if (payloadType > 100)
                payloadType = 96;
            const cmd = `gst-launch-1.0 filesrc location= ${this.path} ! \
qtdemux name=d ! \
queue ! h264parse ! rtph264pay config-interval=10 pt=${payloadType++} ! \
udpsink host=127.0.0.1 port=${this.videoPort} d. ! \
queue ! aacparse ! avdec_aac ! audioresample ! audioconvert ! opusenc ! rtpopuspay pt=${payloadType++} ! \
udpsink host=127.0.0.1 port=${this.audioPort}`;
            const process = (0, child_process_1.exec)(cmd);
            if (this.loop) {
                await new Promise((r) => process.on("close", r));
                run();
            }
        };
        await (0, promises_1.setImmediate)();
        run();
    }
}
//# sourceMappingURL=userMedia.js.map