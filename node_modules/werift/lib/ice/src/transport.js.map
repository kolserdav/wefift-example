{"version":3,"file":"transport.js","sourceRoot":"","sources":["../../../../ice/src/transport.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { createSocket, SocketType } from \"dgram\";\n\nimport { findPort } from \"../../common/src\";\nimport { Address } from \"./types/model\";\nimport { normalizeFamilyNodeV18 } from \"./utils\";\n\nconst log = debug(\"werift-ice:packages/ice/src/transport.ts\");\n\nexport class UdpTransport implements Transport {\n  private socket = createSocket(this.type);\n  onData: (data: Buffer, addr: Address) => void = () => {};\n\n  constructor(private type: SocketType, private portRange?: [number, number]) {\n    this.socket.on(\"message\", (data, info) => {\n      if (normalizeFamilyNodeV18(info.family) === 6) {\n        [info.address] = info.address.split(\"%\"); // example fe80::1d3a:8751:4ffd:eb80%wlp82s0\n      }\n      try {\n        this.onData(data, [info.address, info.port]);\n      } catch (error) {\n        log(\"onData error\", error);\n      }\n    });\n  }\n\n  static async init(type: SocketType, portRange?: [number, number]) {\n    const transport = new UdpTransport(type, portRange);\n    await transport.init();\n    return transport;\n  }\n\n  private async init() {\n    if (this.portRange) {\n      const port = await findPort(\n        this.portRange[0],\n        this.portRange[1],\n        this.type\n      );\n      this.socket.bind(port);\n    } else {\n      this.socket.bind();\n    }\n    await new Promise((r) => this.socket.once(\"listening\", r));\n  }\n\n  send = (data: Buffer, addr: Address) =>\n    new Promise<void>((r, f) => {\n      this.socket.send(data, addr[1], addr[0], (error) => {\n        if (error) {\n          log(\"send error\", addr, data);\n          f(error);\n        } else {\n          r();\n        }\n      });\n    });\n\n  address() {\n    return this.socket.address();\n  }\n\n  close = () =>\n    new Promise<void>((r) => {\n      this.socket.once(\"close\", r);\n      try {\n        this.socket.close();\n      } catch (error) {\n        r();\n      }\n    });\n}\n\nexport interface Transport {\n  onData: (data: Buffer, addr: Address) => void;\n  send: (data: Buffer, addr: Address) => Promise<void>;\n}\n"]}