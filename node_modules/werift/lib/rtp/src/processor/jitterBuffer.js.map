{"version":3,"file":"jitterBuffer.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/jitterBuffer.ts"],"names":[],"mappings":";;;AAAA,iCAA8B;AAE9B,6CAAgD;AAGhD,iCAAkC;AAElC,MAAM,GAAG,GAAG,IAAA,aAAK,EAAC,wDAAwD,CAAC,CAAC;AAE5E,MAAa,YAAa,SAAQ,eAAQ;IAA1C;;QACU,UAAK,GAAG,CAAC,CAAC;QAEV,WAAM,GAA4C,EAAE,CAAC;QAE7D,aAAQ,GAAG,GAAG,CAAC;QAUP,UAAK,GAAG,CAAC,CAAY,EAAE,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAEzC,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,EAAE;gBAC1B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC;aACrC;iBAAM,IAAI,CAAC,CAAC,MAAM,CAAC,cAAc,IAAI,IAAA,eAAS,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;gBAC7D,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjC,GAAG,CAAC,qBAAqB,CAAC,CAAC;oBAC3B,IAAI,CAAC,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;iBACrC;qBAAM;oBACL,OAAO;iBACR;aACF;iBAAM;gBACL,IAAI,CAAC,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;aACrC;YAED,MAAM,OAAO,GAAgB,EAAE,CAAC;YAChC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACrB,QAAS,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,EAAE,CAAC,CAAC,EAAE;gBAClC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,CAAC,EAAE;oBACL,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBAC1B;qBAAM;oBACL,MAAM;iBACP;aACF;YACD,IAAI,CAAC,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAEhC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC;QAC3C,CAAC,CAAC;IACJ,CAAC;IAvCC,cAAc,CAAC,OAAoB;QACjC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,OAAqB;QACnC,IAAI,CAAC,QAAQ,EAAE,eAAe,EAAE,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;CAiCF;AA9CD,oCA8CC","sourcesContent":["import { debug } from \"debug\";\n\nimport { uint16Add } from \"../../../common/src\";\nimport { RtpPacket } from \"..\";\nimport { RtcpPacket } from \"../rtcp/rtcp\";\nimport { Pipeline } from \"./base\";\n\nconst log = debug(\"werift:packages/webrtc/src/nonstandard/jitterBuffer.ts\");\n\nexport class JitterBuffer extends Pipeline {\n  private retry = 0;\n  private head?: number;\n  private buffer: { [sequenceNumber: number]: RtpPacket } = {};\n\n  maxRetry = 100;\n\n  pushRtpPackets(packets: RtpPacket[]) {\n    packets.forEach(this.onRtp);\n  }\n\n  pushRtcpPackets(packets: RtcpPacket[]) {\n    this.children?.pushRtcpPackets?.(packets);\n  }\n\n  private onRtp = (p: RtpPacket) => {\n    this.buffer[p.header.sequenceNumber] = p;\n\n    if (this.head == undefined) {\n      this.head = p.header.sequenceNumber;\n    } else if (p.header.sequenceNumber != uint16Add(this.head, 1)) {\n      if (this.retry++ >= this.maxRetry) {\n        log(\"give up packet lost\");\n        this.head = uint16Add(this.head, 2);\n      } else {\n        return;\n      }\n    } else {\n      this.head = uint16Add(this.head, 1);\n    }\n\n    const packets: RtpPacket[] = [];\n    let tail = this.head;\n    for (; ; tail = uint16Add(tail, 1)) {\n      const p = this.buffer[tail];\n      if (p) {\n        packets.push(p);\n        delete this.buffer[tail];\n      } else {\n        break;\n      }\n    }\n    this.head = uint16Add(tail, -1);\n\n    this.children?.pushRtpPackets?.(packets);\n  };\n}\n"]}