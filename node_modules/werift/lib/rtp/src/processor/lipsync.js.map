{"version":3,"file":"lipsync.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/lipsync.ts"],"names":[],"mappings":"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","sourcesContent":["import Event from \"rx.mini\";\n\nimport { bufferReader, bufferWriter } from \"../../../common/src\";\nimport { RtcpSrPacket, RtpPacket } from \"..\";\nimport { RtcpPacket } from \"../rtcp/rtcp\";\nimport { Pipeline } from \"./base\";\n\n// WIP\n// todo impl\nexport class LipSync extends Pipeline {\n  baseNtpTimestamp?: bigint;\n  baseRtpTimestamp?: number;\n  private rtpPackets: { [pt: number]: RtpPacket[] } = {};\n\n  constructor(\n    public clockRate: number,\n    public mismatch: number,\n    streams?: {\n      rtpStream?: Event<[RtpPacket]>;\n      rtcpStream?: Event<[RtcpPacket]>;\n    }\n  ) {\n    super(streams);\n  }\n\n  pushRtcpPackets(packets: RtcpPacket[]) {\n    packets.forEach((sr) => {\n      if (sr instanceof RtcpSrPacket) {\n        this.srReceived(sr);\n      }\n    });\n    this.children?.pushRtcpPackets?.(packets);\n  }\n\n  private srReceived(sr: RtcpSrPacket) {\n    const { ntpTimestamp, rtpTimestamp } = sr.senderInfo;\n    this.baseNtpTimestamp = ntpTimestamp;\n    this.baseRtpTimestamp = rtpTimestamp;\n  }\n\n  pushRtpPackets(packets: RtpPacket[]) {\n    packets.forEach((p) => {\n      this.rtpPackets[p.header.payloadType] =\n        this.rtpPackets[p.header.payloadType] ?? [];\n      this.rtpPackets[p.header.payloadType].push(p);\n    });\n    if (Object.keys(this.rtpPackets).length === 2) {\n      const [a, b] = Object.values(this.rtpPackets);\n      const lastA = this.calcNtpTime(a.slice(-1)[0].header.timestamp);\n      const lastB = this.calcNtpTime(b.slice(-1)[0].header.timestamp);\n\n      if (lastA == undefined || lastB == undefined) {\n        this.children?.pushRtpPackets?.(packets);\n      } else {\n        //\n      }\n    }\n  }\n\n  private calcNtpTime(rtpTimestamp: number) {\n    if (!this.baseRtpTimestamp || !this.baseNtpTimestamp) {\n      return;\n    }\n\n    // base rtpTimestamp is rollover\n    if (rtpTimestamp - this.baseRtpTimestamp > Max32bit - this.clockRate * 60) {\n      this.baseRtpTimestamp += Max32bit;\n    }\n    // target rtpTimestamp is rollover\n    else if (\n      rtpTimestamp + (Max32bit - this.clockRate * 60) - this.baseRtpTimestamp <\n      0\n    ) {\n      rtpTimestamp += Max32bit;\n    }\n\n    const elapsed = (rtpTimestamp - this.baseRtpTimestamp) / this.clockRate;\n\n    return ntpTime2Time(this.baseNtpTimestamp) + elapsed;\n  }\n}\n\nexport const ntpTime2Time = (ntp: bigint) => {\n  const [ntpSec, ntpMsec] = bufferReader(bufferWriter([8], [ntp]), [4, 4]);\n\n  return Number(`${ntpSec}.${ntpMsec}`);\n};\n\n/**4294967295 */\nexport const Max32bit = Number((0x01n << 32n) - 1n);\n\nexport interface BufferResolve {\n  packets: {\n    packet: RtpPacket;\n    offset: number;\n  }[];\n  /**NTP seconds */\n  startAtNtpTime: number;\n}\n"]}